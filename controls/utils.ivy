expr {=
	def cls {=
		def.pos el, baseClass: null;
		def.body noscope {%
			expr "e-" ~ el ~ " ";
			if not{=empty instanceName} "i-" ~ instanceName ~ " ";
			if not{=empty cssBaseClass} cssBaseClass ~ " ";
			if {=has {=scope} "cssClass"} and not{=empty cssClass} cssClass ~ " ";
			if {=has {=scope} "cssBaseElemClass"} and not{=empty cssBaseElemClass} and {=has cssBaseElemClass el} {=at cssBaseElemClass el} ~ " ";
			if {=has {=scope} "cssElemClass"} and not{=empty cssElemClass} and {=has cssElemClass el} {=at cssElemClass el} ~ " " 
			elif not{=empty baseClass} baseClass ~ " ";
		}
	};
	var firScopeFields: [
		'instanceName',
		'cssBaseClass',
		'cssClass',
		'__scopeName__',
		'moduleName'
	];

	def _addValues {=
		def.kv result fields allScope;
		def.body {=
			if not{=empty fields} {=
				for name in fields {=
					if {=has allScope name} {=
						setat result {=at allScope name} name;
					}
				}
			}
		}
	};

	def firScopeOpts {=
		def.kv
			fields: null;
		def.body noscope {=
			var
				result: {}
				allScope: {=scope};
			_addValues result: result fields: fields allScope: allScope;
			_addValues result: result fields: firScopeFields allScope: allScope;
			expr result;
		}
	};

	def firScopeOptsEnc {=
		def.kv
			fields: null;
		def.body noscope {=
			toJSONBase64 {=firScopeOpts fields: fields}
		}
	};

	def rsFieldFormat {=
		def.pos rsOrRec, fieldName;
		def.body {=
			at rsOrRec.format {=at rsOrRec.namesMapping fieldName}
		}
	};

	def rsGet {=
		def.pos rs, fieldName, rowIndex;
		def.body {=
			var record: {=at rs rowIndex};
			at record fieldName;
		}
	};

	def recGet {=
		def.pos record, fieldName;
		def.body {=at record fieldName}
	};

	def recGetStr {=
		def.pos record, fieldName;
		def.body {=
			var
				fmt: {=rsFieldFormat record fieldName},
				value: {=recGet record fieldName },
				result: null;
			if {=has fmt "enum" } {=
				for enumPair in fmt.enum {=
					if enumPair.v == value {=
						if {=has enumPair "n"} {=
							set result: enumPair.n;
						} else {=
							set result: enumPair.v;
						}
					}
				}
			} else {=
				set result: value;
			};
			expr result;
		}
	};

	def enumWithNull {
		def.pos
			list: null
			nullName: ''
			nullValue: null;
		def.body {=
			insert list {'n': nullName, 'v': nullValue} 0
		}
	};

	def isAllowed {
		def.kv
			object: null
			kind: null
			data: null;
		def.body {=
			var copyRight: userRights;
			set copyRight.object: object;
			set copyRight.kind: kind;
			set copyRight.data: data;
			expr copyRight.isAllowed;
		}
	}
}