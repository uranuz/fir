expr {=
	def cls {=
		def.pos el, baseClass: null;
		def.body noscope {%
			expr "e-" ~ el ~ " ";
			if not{=empty instanceName}
				"i-" ~ instanceName ~ " ";
			if not{=empty cssBaseClass}
				cssBaseClass ~ " ";
			if {=has {=scope} "cssClass"} and not{=empty cssClass}
				cssClass ~ " ";
			if {=has {=scope} "cssBaseElemClass"} and not{=empty cssBaseElemClass} and {=has cssBaseElemClass el}
				{=at cssBaseElemClass el} ~ " ";
			if {=has {=scope} "cssElemClass"} and not{=empty cssElemClass} and {=has cssElemClass el}
				{=at cssElemClass el} ~ " " 
			elif not{=empty baseClass}
				baseClass ~ " ";
		}
	};
	var firScopeFields: [
		'instanceName',
		'cssBaseClass',
		'cssClass',
		'_ivyMethod',
		'_ivyModule',
		'moduleName',
		'RPCMethod',
		'requestURI'
	];

	def _addValues {=
		def.kv result fields allScope;
		def.body {=
			if not{=empty fields} {=
				for name in fields {=
					if {=has allScope name} {=
						setat result {=at allScope name} name;
					}
				}
			}
		}
	};

	def firScopeOpts {=
		def.kv
			fields: null;
		def.body noscope {=
			var
				result: {}
				allScope: {=scope};
			_addValues result: result fields: fields allScope: allScope;
			_addValues result: result fields: firScopeFields allScope: allScope;
			expr result;
		}
	};

	def firScopeOptsEnc {=
		def.kv
			fields: null;
		def.body noscope {=
			toJSONBase64 {=firScopeOpts fields: fields}
		}
	};

	def enumFormatWithNull {
		def.pos
			enumFormat: null
			nullName: ''
			nullValue: null;
		def.body {=
			var res: [];
			insert res {name: nullName, value: nullValue} {=len res};
			repeat it in enumFormat {=
				insert res {name: it.name, value: it.value} {=len res};
			};
			expr res;
		}
	};

	def hasRight {
		def.kv
			obj: null
			subobj: null
			kind: null
			data: null;
		def.body noscope {=
			var copyRight: userRights;
			set copyRight.object: {=
				if not{=empty obj}
					obj
				elif not{=empty subobj} and {=has {=scope} 'accessObject'}
					accessObject ~ '.' ~ subobj
				elif {=has {=scope} 'accessObject'}
					accessObject;
			};
			set copyRight.kind: kind;
			set copyRight.data: data;
			expr copyRight.hasRight;
		}
	};

	def isInRoles {=
		def.pos
			roles;
		def.body {=
			for role in roles {=
				for userRole in userIdentity.accessRoles {=
					if role == userRole
						{=return true}
				}
			};
			return false
		}
	};
}