expr {=
	def cls {=
		var el, baseClass: null;
		do noscope {%
			expr "e-" ~ el ~ " ";
			if instanceName
				"i-" ~ instanceName ~ " ";
			if cssBaseClass
				cssBaseClass ~ " ";
			if {=has {=scope} "cssClass"} and cssClass
				cssClass ~ " ";
			if {=has {=scope} "cssBaseElemClass"} and cssBaseElemClass and {=has cssBaseElemClass el}
				{=at cssBaseElemClass el} ~ " ";
			if {=has {=scope} "cssElemClass"} and cssElemClass and {=has cssElemClass el}
				{=at cssElemClass el} ~ " " 
			elif baseClass
				baseClass ~ " ";
		}
	};
	var firScopeFields: [
		'instanceName',
		'cssBaseClass',
		'cssClass',
		'_ivyMethod',
		'_ivyModule',
		'moduleName',
		'RPCMethod',
		'requestURI'
	];

	def _addValues {=
		var result fields allScope;
		do {=
			if fields {=
				for name in fields {=
					if {=has allScope name} {=
						setat result {=at allScope name} name;
					}
				}
			}
		}
	};

	def firScopeOpts {=
		var
			fields: null;
		do noscope {=
			var
				result: {}
				allScope: {=scope};
			_addValues result: result fields: fields allScope: allScope;
			_addValues result: result fields: firScopeFields allScope: allScope;
			expr result;
		}
	};

	def firScopeOptsEnc {=
		var
			fields: null;
		do noscope {=
			optStorage {=firScopeOpts fields: fields}
		}
	};

	def enumFormatWithNull {
		var
			enumFormat: null
			nullName: ''
			nullValue: null;
		do {=
			var res: [];
			insert res {name: nullName, value: nullValue} {=len res};
			repeat it in enumFormat {=
				insert res {name: it.name, value: it.value} {=len res};
			};
			expr res;
		}
	};

	def hasRight {
		var
			obj: null
			subobj: null
			kind: null
			data: null;
		do noscope {=
			var copyRight: userRights;
			set copyRight.object: {=
				if obj
					obj
				elif subobj and {=has {=scope} 'accessObject'}
					accessObject ~ '.' ~ subobj
				elif {=has {=scope} 'accessObject'}
					accessObject;
			};
			set copyRight.kind: kind;
			set copyRight.data: data;
			expr copyRight.hasRight;
		}
	};

	def isInRoles {=
		var
			roles;
		do {=
			for role in roles {=
				for userRole in userIdentity.accessRoles {=
					if role == userRole
						{=return true}
				}
			};
			return false
		}
	};

	def treeMetaInfo {=
		var
			rs
			keyProperty
			parentProperty;
		do {=
			var
				roots: []
				idxByKey: {}
				i: 0;
			for obj in rs {=
				var
					num: {=at obj keyProperty}
					numStr: {=str num}
					parentNum: {=at obj parentProperty}
					parentNumStr: {=str parentNum};
				if not parentNum {=
					insert roots numStr null
				} else {=
					var dat: {=
						if {=has idxByKey parentNumStr}
							{=at idxByKey parentNumStr}
						else
							{idx: null, children: []}
					};
					insert dat.children numStr null;
					setat idxByKey dat parentNumStr;
				};
				var dat2: {=
					if {=has idxByKey numStr}
						{=at idxByKey numStr}
					else
						{idx: i, children: []}
				};
				set dat2.idx: i;
				setat idxByKey dat2 numStr;
				set i: i + 1;
			};
			return {
				roots: roots,
				idxByKey: idxByKey
			};
		}
	};
}